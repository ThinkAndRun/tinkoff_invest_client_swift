//
// MarketAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class MarketAPI {
    /**
     Получение списка облигаций
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketBondsGet(apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketInstrumentListResponse?, _ error: Error?) -> Void)) {
        marketBondsGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение списка облигаций
     - GET /market/bonds
     - BASIC:
       - type: http
       - name: sso_auth
     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketBondsGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/bonds"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение исторических свечей по FIGI
     
     - parameter figi: (query) FIGI 
     - parameter from: (query) Начало временного промежутка 
     - parameter to: (query) Конец временного промежутка 
     - parameter interval: (query) Интервал свечи 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketCandlesGet(figi: String, from: Date, to: Date, interval: CandleResolution, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: CandlesResponse?, _ error: Error?) -> Void)) {
        marketCandlesGetWithRequestBuilder(figi: figi, from: from, to: to, interval: interval).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение исторических свечей по FIGI
     - GET /market/candles
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter figi: (query) FIGI 
     - parameter from: (query) Начало временного промежутка 
     - parameter to: (query) Конец временного промежутка 
     - parameter interval: (query) Интервал свечи 
     - returns: RequestBuilder<CandlesResponse> 
     */
    open class func marketCandlesGetWithRequestBuilder(figi: String, from: Date, to: Date, interval: CandleResolution) -> RequestBuilder<CandlesResponse> {
        let path = "/market/candles"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "figi": figi.encodeToJSON(),
            "from": from.encodeToJSON(),
            "to": to.encodeToJSON(),
            "interval": interval.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CandlesResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение списка валютных пар
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketCurrenciesGet(apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketInstrumentListResponse?, _ error: Error?) -> Void)) {
        marketCurrenciesGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение списка валютных пар
     - GET /market/currencies
     - BASIC:
       - type: http
       - name: sso_auth
     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketCurrenciesGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/currencies"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение списка ETF
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketEtfsGet(apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketInstrumentListResponse?, _ error: Error?) -> Void)) {
        marketEtfsGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение списка ETF
     - GET /market/etfs
     - BASIC:
       - type: http
       - name: sso_auth
     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketEtfsGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/etfs"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение стакана по FIGI
     
     - parameter figi: (query) FIGI 
     - parameter depth: (query) Глубина стакана [1..20] 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketOrderbookGet(figi: String, depth: Int, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderbookResponse?, _ error: Error?) -> Void)) {
        marketOrderbookGetWithRequestBuilder(figi: figi, depth: depth).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение стакана по FIGI
     - GET /market/orderbook
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter figi: (query) FIGI 
     - parameter depth: (query) Глубина стакана [1..20] 
     - returns: RequestBuilder<OrderbookResponse> 
     */
    open class func marketOrderbookGetWithRequestBuilder(figi: String, depth: Int) -> RequestBuilder<OrderbookResponse> {
        let path = "/market/orderbook"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "figi": figi.encodeToJSON(),
            "depth": depth.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrderbookResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение инструмента по FIGI
     
     - parameter figi: (query) FIGI 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketSearchByFigiGet(figi: String, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchMarketInstrumentResponse?, _ error: Error?) -> Void)) {
        marketSearchByFigiGetWithRequestBuilder(figi: figi).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение инструмента по FIGI
     - GET /market/search/by-figi
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter figi: (query) FIGI 
     - returns: RequestBuilder<SearchMarketInstrumentResponse> 
     */
    open class func marketSearchByFigiGetWithRequestBuilder(figi: String) -> RequestBuilder<SearchMarketInstrumentResponse> {
        let path = "/market/search/by-figi"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "figi": figi.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SearchMarketInstrumentResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение инструмента по тикеру
     
     - parameter ticker: (query) Тикер инструмента 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketSearchByTickerGet(ticker: String, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketInstrumentListResponse?, _ error: Error?) -> Void)) {
        marketSearchByTickerGetWithRequestBuilder(ticker: ticker).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение инструмента по тикеру
     - GET /market/search/by-ticker
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter ticker: (query) Тикер инструмента 
     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketSearchByTickerGetWithRequestBuilder(ticker: String) -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/search/by-ticker"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ticker": ticker.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение списка акций
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func marketStocksGet(apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketInstrumentListResponse?, _ error: Error?) -> Void)) {
        marketStocksGetWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение списка акций
     - GET /market/stocks
     - BASIC:
       - type: http
       - name: sso_auth
     - returns: RequestBuilder<MarketInstrumentListResponse> 
     */
    open class func marketStocksGetWithRequestBuilder() -> RequestBuilder<MarketInstrumentListResponse> {
        let path = "/market/stocks"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MarketInstrumentListResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
