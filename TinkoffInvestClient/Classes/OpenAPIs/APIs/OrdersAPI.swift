//
// OrdersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class OrdersAPI {
    /**
     Отмена заявки
     
     - parameter orderId: (query) ID заявки 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ordersCancelPost(orderId: String, brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: Empty?, _ error: Error?) -> Void)) {
        ordersCancelPostWithRequestBuilder(orderId: orderId, brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Отмена заявки
     - POST /orders/cancel
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter orderId: (query) ID заявки 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<Empty> 
     */
    open class func ordersCancelPostWithRequestBuilder(orderId: String, brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/orders/cancel"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "orderId": orderId.encodeToJSON(),
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Empty>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Получение списка активных заявок
     
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ordersGet(brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrdersResponse?, _ error: Error?) -> Void)) {
        ordersGetWithRequestBuilder(brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получение списка активных заявок
     - GET /orders
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<OrdersResponse> 
     */
    open class func ordersGetWithRequestBuilder(brokerAccountId: String? = nil) -> RequestBuilder<OrdersResponse> {
        let path = "/orders"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrdersResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Создание лимитной заявки
     
     - parameter figi: (query) FIGI инструмента 
     - parameter limitOrderRequest: (body)  
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ordersLimitOrderPost(figi: String, limitOrderRequest: LimitOrderRequest, brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: LimitOrderResponse?, _ error: Error?) -> Void)) {
        ordersLimitOrderPostWithRequestBuilder(figi: figi, limitOrderRequest: limitOrderRequest, brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Создание лимитной заявки
     - POST /orders/limit-order
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter figi: (query) FIGI инструмента 
     - parameter limitOrderRequest: (body)  
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<LimitOrderResponse> 
     */
    open class func ordersLimitOrderPostWithRequestBuilder(figi: String, limitOrderRequest: LimitOrderRequest, brokerAccountId: String? = nil) -> RequestBuilder<LimitOrderResponse> {
        let path = "/orders/limit-order"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: limitOrderRequest)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "figi": figi.encodeToJSON(),
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LimitOrderResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Создание рыночной заявки
     
     - parameter figi: (query) FIGI инструмента 
     - parameter marketOrderRequest: (body)  
     - parameter brokerAccountId: (query) Уникальный идентификатор счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ordersMarketOrderPost(figi: String, marketOrderRequest: MarketOrderRequest, brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketOrderResponse?, _ error: Error?) -> Void)) {
        ordersMarketOrderPostWithRequestBuilder(figi: figi, marketOrderRequest: marketOrderRequest, brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Создание рыночной заявки
     - POST /orders/market-order
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter figi: (query) FIGI инструмента 
     - parameter marketOrderRequest: (body)  
     - parameter brokerAccountId: (query) Уникальный идентификатор счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<MarketOrderResponse> 
     */
    open class func ordersMarketOrderPostWithRequestBuilder(figi: String, marketOrderRequest: MarketOrderRequest, brokerAccountId: String? = nil) -> RequestBuilder<MarketOrderResponse> {
        let path = "/orders/market-order"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: marketOrderRequest)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "figi": figi.encodeToJSON(),
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MarketOrderResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
