//
// SandboxAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class SandboxAPI {
    /**
     Удаление всех позиций
     
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxClearPost(brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: Empty?, _ error: Error?) -> Void)) {
        sandboxClearPostWithRequestBuilder(brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаление всех позиций
     - POST /sandbox/clear
     - Удаление всех позиций клиента
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxClearPostWithRequestBuilder(brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/clear"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Empty>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Выставление баланса по валютным позициям
     
     - parameter sandboxSetCurrencyBalanceRequest: (body) Запрос на выставление баланса по валютным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxCurrenciesBalancePost(sandboxSetCurrencyBalanceRequest: SandboxSetCurrencyBalanceRequest, brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: Empty?, _ error: Error?) -> Void)) {
        sandboxCurrenciesBalancePostWithRequestBuilder(sandboxSetCurrencyBalanceRequest: sandboxSetCurrencyBalanceRequest, brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Выставление баланса по валютным позициям
     - POST /sandbox/currencies/balance
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter sandboxSetCurrencyBalanceRequest: (body) Запрос на выставление баланса по валютным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxCurrenciesBalancePostWithRequestBuilder(sandboxSetCurrencyBalanceRequest: SandboxSetCurrencyBalanceRequest, brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/currencies/balance"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxSetCurrencyBalanceRequest)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Empty>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Выставление баланса по инструментным позициям
     
     - parameter sandboxSetPositionBalanceRequest: (body) Запрос на выставление баланса по инструментным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxPositionsBalancePost(sandboxSetPositionBalanceRequest: SandboxSetPositionBalanceRequest, brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: Empty?, _ error: Error?) -> Void)) {
        sandboxPositionsBalancePostWithRequestBuilder(sandboxSetPositionBalanceRequest: sandboxSetPositionBalanceRequest, brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Выставление баланса по инструментным позициям
     - POST /sandbox/positions/balance
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter sandboxSetPositionBalanceRequest: (body) Запрос на выставление баланса по инструментным позициям 
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxPositionsBalancePostWithRequestBuilder(sandboxSetPositionBalanceRequest: SandboxSetPositionBalanceRequest, brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/positions/balance"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxSetPositionBalanceRequest)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Empty>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Регистрация клиента в sandbox
     
     - parameter sandboxRegisterRequest: (body) Запрос на создание счета и выставление баланса по валютным позициям (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxRegisterPost(sandboxRegisterRequest: SandboxRegisterRequest? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: SandboxRegisterResponse?, _ error: Error?) -> Void)) {
        sandboxRegisterPostWithRequestBuilder(sandboxRegisterRequest: sandboxRegisterRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Регистрация клиента в sandbox
     - POST /sandbox/register
     - Создание счета и валютных позиций для клиента
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter sandboxRegisterRequest: (body) Запрос на создание счета и выставление баланса по валютным позициям (optional)
     - returns: RequestBuilder<SandboxRegisterResponse> 
     */
    open class func sandboxRegisterPostWithRequestBuilder(sandboxRegisterRequest: SandboxRegisterRequest? = nil) -> RequestBuilder<SandboxRegisterResponse> {
        let path = "/sandbox/register"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sandboxRegisterRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SandboxRegisterResponse>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Удаление счета
     
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sandboxRemovePost(brokerAccountId: String? = nil, apiResponseQueue: DispatchQueue = TinkoffInvestClientAPI.apiResponseQueue, completion: @escaping ((_ data: Empty?, _ error: Error?) -> Void)) {
        sandboxRemovePostWithRequestBuilder(brokerAccountId: brokerAccountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удаление счета
     - POST /sandbox/remove
     - Удаление счета клиента
     - BASIC:
       - type: http
       - name: sso_auth
     - parameter brokerAccountId: (query) Номер счета (по умолчанию - Тинькофф) (optional)
     - returns: RequestBuilder<Empty> 
     */
    open class func sandboxRemovePostWithRequestBuilder(brokerAccountId: String? = nil) -> RequestBuilder<Empty> {
        let path = "/sandbox/remove"
        let URLString = TinkoffInvestClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "brokerAccountId": brokerAccountId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Empty>.Type = TinkoffInvestClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
